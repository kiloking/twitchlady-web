{"ast":null,"code":"\"use strict\";\n\nvar fetch = require(\"node-fetch\");\n\nvar _ = require(\"./utils\");\n\nvar api = function api(options, callback) {\n  // Set the url to options.uri or options.url..\n  var url = options.url !== undefined ? options.url : options.uri; // Make sure it is a valid url..\n\n  if (!_.isURL(url)) {\n    url = \"https://api.twitch.tv/kraken\" + (url[0] === \"/\" ? url : \"/\" + url);\n  } // We are inside a Node application, so we can use the node-fetch module..\n\n\n  if (_.isNode()) {\n    var opts = _.merge({\n      method: \"GET\",\n      json: true\n    }, options, {\n      url: url\n    });\n\n    var url = opts.url;\n\n    if (opts.qs) {\n      var qs = new URLSearchParams(opts.qs);\n      url += \"?\" + qs;\n    }\n\n    var response = {};\n    /** @type {ReturnType<import('node-fetch')['default']>} */\n\n    var fetchPromise = fetch(url, {\n      method: opts.method,\n      headers: opts.headers,\n      body: opts.body\n    });\n    fetchPromise.then(function (res) {\n      response = {\n        statusCode: res.status,\n        headers: res.headers\n      };\n      return opts.json ? res.json() : res.text();\n    }).then(function (data) {\n      return callback(null, response, data);\n    }, function (err) {\n      return callback(err, response, null);\n    });\n  } // Web application, extension, React Native etc.\n  else {\n      var opts = _.merge({\n        method: \"GET\",\n        headers: {}\n      }, options, {\n        url: url\n      }); // prepare request\n\n\n      var xhr = new XMLHttpRequest();\n      xhr.open(opts.method, opts.url, true);\n\n      for (var name in opts.headers) {\n        xhr.setRequestHeader(name, opts.headers[name]);\n      }\n\n      xhr.responseType = \"json\"; // set request handler\n\n      xhr.addEventListener(\"load\", function (ev) {\n        if (xhr.readyState == 4) {\n          if (xhr.status != 200) {\n            callback(xhr.status, null, null);\n          } else {\n            callback(null, null, xhr.response);\n          }\n        }\n      }); // submit\n\n      xhr.send();\n    }\n};\n\nmodule.exports = api;","map":{"version":3,"sources":["C:/git/react-apps/react-twitchlady/node_modules/react-tmi/lib/api.js"],"names":["fetch","require","_","api","options","callback","url","undefined","uri","isURL","isNode","opts","merge","method","json","qs","URLSearchParams","response","fetchPromise","headers","body","then","res","statusCode","status","text","data","err","xhr","XMLHttpRequest","open","name","setRequestHeader","responseType","addEventListener","ev","readyState","send","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar fetch = require(\"node-fetch\");\nvar _ = require(\"./utils\");\n\nvar api = function api(options, callback) {\n\t// Set the url to options.uri or options.url..\n\tvar url = options.url !== undefined ? options.url : options.uri;\n\n\t// Make sure it is a valid url..\n\tif (!_.isURL(url)) {\n\t\turl = \"https://api.twitch.tv/kraken\" + (url[0] === \"/\" ? url : \"/\" + url);\n\t}\n\n\t// We are inside a Node application, so we can use the node-fetch module..\n\tif (_.isNode()) {\n\t\tvar opts = _.merge({ method: \"GET\", json: true }, options, { url: url });\n\t\tvar url = opts.url;\n\t\tif (opts.qs) {\n\t\t\tvar qs = new URLSearchParams(opts.qs);\n\t\t\turl += \"?\" + qs;\n\t\t}\n\t\tvar response = {};\n\t\t/** @type {ReturnType<import('node-fetch')['default']>} */\n\t\tvar fetchPromise = fetch(url, {\n\t\t\tmethod: opts.method,\n\t\t\theaders: opts.headers,\n\t\t\tbody: opts.body\n\t\t});\n\t\tfetchPromise.then(function (res) {\n\t\t\tresponse = { statusCode: res.status, headers: res.headers };\n\t\t\treturn opts.json ? res.json() : res.text();\n\t\t}).then(function (data) {\n\t\t\treturn callback(null, response, data);\n\t\t}, function (err) {\n\t\t\treturn callback(err, response, null);\n\t\t});\n\t}\n\t// Web application, extension, React Native etc.\n\telse {\n\t\t\tvar opts = _.merge({ method: \"GET\", headers: {} }, options, { url: url });\n\t\t\t// prepare request\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open(opts.method, opts.url, true);\n\t\t\tfor (var name in opts.headers) {\n\t\t\t\txhr.setRequestHeader(name, opts.headers[name]);\n\t\t\t}\n\t\t\txhr.responseType = \"json\";\n\t\t\t// set request handler\n\t\t\txhr.addEventListener(\"load\", function (ev) {\n\t\t\t\tif (xhr.readyState == 4) {\n\t\t\t\t\tif (xhr.status != 200) {\n\t\t\t\t\t\tcallback(xhr.status, null, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(null, null, xhr.response);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t// submit\n\t\t\txhr.send();\n\t\t}\n};\n\nmodule.exports = api;"]},"metadata":{},"sourceType":"script"}